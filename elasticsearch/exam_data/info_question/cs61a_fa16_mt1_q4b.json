{"q_txt": "Implement sum_squares, which takes a non-negative integer n and uses repeat_sum to return the sum of the squares of the first n positive integers. Assume repeat_sum is implemented correctly. You may use pow, which raises its first argument to the power of its second: pow(9, 2) is 81 and pow(9, 0.5) is 3.0.", "extra": "caterepeat def sum_squares (n): \"\"\" Return the sum of the first N perfect squares. >>> sum_squares (0) 0 >>> sum_squares (3) # 1**2 + 2**2 + 3**2 14 >>> sum_squares (5) # 1**2 + 2**2 + 3**2 + 4**2 + 5**2 55 \"\"\" f = return repeat_sum (f , 0 , n)", "number": "4b", "has_solution": true, "s_txt": "lambda x : pow (round (pow (x , 0.5) + 1) , 2)"}
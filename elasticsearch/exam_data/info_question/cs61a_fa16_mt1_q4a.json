{"q_txt": "Implement repeat_sum, which takes a one-argument function f, a value x, and a non-negative integer n. It returns the sum of n + 1 terms. Each term, indexed by k starting at 0, is the result of applying f to x repeatedly k times. You may assign to only one name in each of the three assignment statements. You may not use recursive calls or any features of Python not yet covered in the course.", "extra": "caterepeat def repeat_sum (f , x , n ): \"\"\" Compute the following summation of N+1 terms , where the last term calls F N times : x + f(x) + f(f(x)) + f(f(f(x))) + ... + f(f (... f(x))) >>> repeat_sum ( lambda x: x*x, 3 , 0) # 3 3 >>> repeat_sum ( lambda x: x*x, 3 , 1) # 3 + 9 12 >>> repeat_sum ( lambda x: x+2 , 3 , 4) # 3 + 5 + 7 + 9 + 11 35 \"\"\" total , k = 0 , 0 while return total", "number": "4a", "has_solution": true, "s_txt": "while k <= n : total = total + x x = f (x) k = k + 1"}